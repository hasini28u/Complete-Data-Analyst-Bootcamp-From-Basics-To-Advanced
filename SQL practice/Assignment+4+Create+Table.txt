1. TABLE CREATION
    -- Creating the Employees table
    CREATE TABLE Employees (
        EmployeeID INT PRIMARY KEY,
        FirstName NVARCHAR(50),
        LastName NVARCHAR(50),
        Email NVARCHAR(100) UNIQUE,
        DepartmentID INT,
        HireDate DATE,
        Salary DECIMAL(10, 2)
    );

    -- Creating the Departments table
    CREATE TABLE Departments (
        DepartmentID INT PRIMARY KEY,
        DepartmentName NVARCHAR(100)
    );


    -- Inserting data into the Employees table
    INSERT INTO Employees (EmployeeID, FirstName, LastName, Email, DepartmentID, HireDate, Salary)
    VALUES 
    (1, 'John', 'Smith', 'john.smith@example.com', 101, '2021-06-15', 75000.00),
    (2, 'Jane', 'Doe', 'jane.doe@example.com', 102, '2020-03-10', 85000.00),
    (3, 'Michael', 'Johnson', 'michael.johnson@example.com', 101, '2019-11-22', 95000.00),
    (4, 'Emily', 'Davis', 'emily.davis@example.com', 103, '2022-01-05', 68000.00),
    (5, 'William', 'Brown', 'william.brown@example.com', 102, '2018-07-19', 80000.00);

    -- Inserting data into the Departments table
    INSERT INTO Departments (DepartmentID, DepartmentName)
    VALUES
    (101, 'Human Resources'),
    (102, 'Finance'),
    (103, 'IT');

2. ASSIGNMENT SUBMISSION

    -- 1. List the names of employees along with the names of their departments.
    -- An INNER JOIN is used to combine rows from both tables where the DepartmentID matches.
    SELECT E.FirstName, E.LastName, D.DepartmentName
    FROM Employees AS E
    INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID;

    -- 2. List all departments and the employees working in them, including departments with no employees.
    -- A LEFT JOIN is used to return all rows from the 'Departments' table (the left table) and the matching rows from the 'Employees' table.
    SELECT D.DepartmentName, E.FirstName, E.LastName
    FROM Departments AS D
    LEFT JOIN Employees AS E ON D.DepartmentID = E.DepartmentID;

    -- 3. Find the names of employees who do not belong to any department.
    -- This query uses a LEFT JOIN and filters for rows where the DepartmentName in the 'Departments' table is NULL, which indicates no match was found.
    SELECT E.FirstName, E.LastName
    FROM Employees AS E
    LEFT JOIN Departments AS D ON E.DepartmentID = D.DepartmentID
    WHERE D.DepartmentName IS NULL;

    -- 4. List the names of employees who work in the same department as 'Jane Doe'.
    -- This query uses a subquery to find Jane Doe's DepartmentID first, and then the outer query selects all employees with that same DepartmentID, excluding Jane Doe herself.
    SELECT FirstName, LastName
    FROM Employees
    WHERE DepartmentID = (
        SELECT DepartmentID
        FROM Employees
        WHERE FirstName = 'Jane' AND LastName = 'Doe'
    ) AND NOT (FirstName = 'Jane' AND LastName = 'Doe');

    -- 5. Find the department with the highest total salary paid to its employees.
    -- This query groups employees by their DepartmentID, calculates the sum of salaries for each group, and then orders the results in descending order to find the highest total.
    -- The TOP 1 clause is used to return only the single highest-paying department.
    SELECT TOP 1 D.DepartmentName, SUM(E.Salary) AS TotalSalary
    FROM Employees AS E
    INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID
    GROUP BY D.DepartmentName
    ORDER BY TotalSalary DESC;